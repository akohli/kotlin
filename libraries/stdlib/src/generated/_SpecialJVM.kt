package kotlin

//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

import java.util.*

/**
 * Returns a list containing all elements that are instances of specified class
 */
public fun <T, R: T> Array<out T>.filterIsInstance(klass: Class<R>) : List<R> {
    return filterIsInstanceTo(ArrayList<R>(), klass)
    
}

/**
 * Returns a list containing all elements that are instances of specified class
 */
public fun <T, R: T> Iterable<T>.filterIsInstance(klass: Class<R>) : List<R> {
    return filterIsInstanceTo(ArrayList<R>(), klass)
    
}

/**
 * Returns a stream containing all elements that are instances of specified class
 */
public fun <T, R: T> Stream<T>.filterIsInstance(klass: Class<R>) : Stream<T> {
    return FilteringStream(this, true, { klass.isInstance(it) })
    
}

/**
 * Appends all elements that are instances of specified class into the given *collection*
 */
public fun <T, C: MutableCollection<in R>, R: T> Array<out T>.filterIsInstanceTo(collection: C, klass: Class<R>) : C {
    for (element in this) if (klass.isInstance(element)) collection.add(element as R)
    return collection
    
}

/**
 * Appends all elements that are instances of specified class into the given *collection*
 */
public fun <T, C: MutableCollection<in R>, R: T> Iterable<T>.filterIsInstanceTo(collection: C, klass: Class<R>) : C {
    for (element in this) if (klass.isInstance(element)) collection.add(element as R)
    return collection
    
}

/**
 * Appends all elements that are instances of specified class into the given *collection*
 */
public fun <T, C: MutableCollection<in R>, R: T> Stream<T>.filterIsInstanceTo(collection: C, klass: Class<R>) : C {
    for (element in this) if (klass.isInstance(element)) collection.add(element as R)
    return collection
    
}

