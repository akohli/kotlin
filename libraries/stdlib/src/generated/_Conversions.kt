package kotlin

//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

import java.util.*

/**
 * Adds all elements to a new ArrayList
 */
public fun <T> Array<T>.toArrayList() : ArrayList<T> {
    val list = ArrayList<T>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun BooleanArray.toArrayList() : ArrayList<Boolean> {
    val list = ArrayList<Boolean>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun ByteArray.toArrayList() : ArrayList<Byte> {
    val list = ArrayList<Byte>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun CharArray.toArrayList() : ArrayList<Char> {
    val list = ArrayList<Char>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun DoubleArray.toArrayList() : ArrayList<Double> {
    val list = ArrayList<Double>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun FloatArray.toArrayList() : ArrayList<Float> {
    val list = ArrayList<Float>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun IntArray.toArrayList() : ArrayList<Int> {
    val list = ArrayList<Int>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun LongArray.toArrayList() : ArrayList<Long> {
    val list = ArrayList<Long>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun ShortArray.toArrayList() : ArrayList<Short> {
    val list = ArrayList<Short>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <T> Collection<T>.toArrayList() : ArrayList<T> {
    return ArrayList<T>(this)
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <T> Iterable<T>.toArrayList() : ArrayList<T> {
    return toCollection(ArrayList<T>())
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <T> Stream<T>.toArrayList() : ArrayList<T> {
    return toCollection(ArrayList<T>())
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <T, C : MutableCollection<in T>> Array<T>.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Byte>> ByteArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Char>> CharArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Double>> DoubleArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Float>> FloatArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Int>> IntArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Long>> LongArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <C : MutableCollection<in Short>> ShortArray.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Adds all elements to a new ArrayList
 */
public fun <T, C : MutableCollection<in T>> Stream<T>.toCollection(collection : C) : C {
    for (item in this) {
        collection.add(item)
    }
    return collection
    
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun <T> Array<T>.toLinkedList() : LinkedList<T> {
    return toCollection(LinkedList<T>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun BooleanArray.toLinkedList() : LinkedList<Boolean> {
    return toCollection(LinkedList<Boolean>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun ByteArray.toLinkedList() : LinkedList<Byte> {
    return toCollection(LinkedList<Byte>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun CharArray.toLinkedList() : LinkedList<Char> {
    return toCollection(LinkedList<Char>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun DoubleArray.toLinkedList() : LinkedList<Double> {
    return toCollection(LinkedList<Double>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun FloatArray.toLinkedList() : LinkedList<Float> {
    return toCollection(LinkedList<Float>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun IntArray.toLinkedList() : LinkedList<Int> {
    return toCollection(LinkedList<Int>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun LongArray.toLinkedList() : LinkedList<Long> {
    return toCollection(LinkedList<Long>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun ShortArray.toLinkedList() : LinkedList<Short> {
    return toCollection(LinkedList<Short>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun <T> Iterable<T>.toLinkedList() : LinkedList<T> {
    return toCollection(LinkedList<T>())
}

/**
 * Copies all elements into a [[LinkedList]]
 */
public fun <T> Stream<T>.toLinkedList() : LinkedList<T> {
    return toCollection(LinkedList<T>())
}

/**
 * Returns new List<T> containing all elements
 */
public fun <T> Array<T>.toList() : List<T> {
    return ArrayList<T>(Arrays.asList(*this))
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun BooleanArray.toList() : List<Boolean> {
    val list = ArrayList<Boolean>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun ByteArray.toList() : List<Byte> {
    val list = ArrayList<Byte>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun CharArray.toList() : List<Char> {
    val list = ArrayList<Char>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun DoubleArray.toList() : List<Double> {
    val list = ArrayList<Double>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun FloatArray.toList() : List<Float> {
    val list = ArrayList<Float>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun IntArray.toList() : List<Int> {
    val list = ArrayList<Int>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun LongArray.toList() : List<Long> {
    val list = ArrayList<Long>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun ShortArray.toList() : List<Short> {
    val list = ArrayList<Short>(size)
    for (item in this) list.add(item)
    return list
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun <T> Collection<T>.toList() : List<T> {
    return ArrayList<T>(this)
    
}

/**
 * Returns new List<T> containing all elements
 */
public fun <T> Iterable<T>.toList() : List<T> {
    return toCollection(ArrayList<T>())
}

/**
 * Returns new List<T> containing all elements
 */
public fun <T> Stream<T>.toList() : List<T> {
    return toCollection(ArrayList<T>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun <T> Array<T>.toSet() : Set<T> {
    return toCollection(LinkedHashSet<T>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun BooleanArray.toSet() : Set<Boolean> {
    return toCollection(LinkedHashSet<Boolean>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun ByteArray.toSet() : Set<Byte> {
    return toCollection(LinkedHashSet<Byte>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun CharArray.toSet() : Set<Char> {
    return toCollection(LinkedHashSet<Char>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun DoubleArray.toSet() : Set<Double> {
    return toCollection(LinkedHashSet<Double>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun FloatArray.toSet() : Set<Float> {
    return toCollection(LinkedHashSet<Float>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun IntArray.toSet() : Set<Int> {
    return toCollection(LinkedHashSet<Int>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun LongArray.toSet() : Set<Long> {
    return toCollection(LinkedHashSet<Long>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun ShortArray.toSet() : Set<Short> {
    return toCollection(LinkedHashSet<Short>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun <T> Iterable<T>.toSet() : Set<T> {
    return toCollection(LinkedHashSet<T>())
}

/**
 * Copies all elements into a [[Set]]
 */
public fun <T> Stream<T>.toSet() : Set<T> {
    return toCollection(LinkedHashSet<T>())
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun <T: Comparable<T>> Array<T>.toSortedList() : List<T> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun BooleanArray.toSortedList() : List<Boolean> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun ByteArray.toSortedList() : List<Byte> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun CharArray.toSortedList() : List<Char> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun DoubleArray.toSortedList() : List<Double> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun FloatArray.toSortedList() : List<Float> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun IntArray.toSortedList() : List<Int> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun LongArray.toSortedList() : List<Long> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun ShortArray.toSortedList() : List<Short> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun <T: Comparable<T>> Iterable<T>.toSortedList() : List<T> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[List]] and sorts them
 */
public fun <T: Comparable<T>> Stream<T>.toSortedList() : List<T> {
    return toArrayList().sort()
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun <T> Array<T>.toSortedSet() : SortedSet<T> {
    return toCollection(TreeSet<T>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun BooleanArray.toSortedSet() : SortedSet<Boolean> {
    return toCollection(TreeSet<Boolean>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun ByteArray.toSortedSet() : SortedSet<Byte> {
    return toCollection(TreeSet<Byte>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun CharArray.toSortedSet() : SortedSet<Char> {
    return toCollection(TreeSet<Char>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun DoubleArray.toSortedSet() : SortedSet<Double> {
    return toCollection(TreeSet<Double>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun FloatArray.toSortedSet() : SortedSet<Float> {
    return toCollection(TreeSet<Float>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun IntArray.toSortedSet() : SortedSet<Int> {
    return toCollection(TreeSet<Int>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun LongArray.toSortedSet() : SortedSet<Long> {
    return toCollection(TreeSet<Long>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun ShortArray.toSortedSet() : SortedSet<Short> {
    return toCollection(TreeSet<Short>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun <T> Iterable<T>.toSortedSet() : SortedSet<T> {
    return toCollection(TreeSet<T>())
}

/**
 * Copies all elements into a [[SortedSet]]
 */
public fun <T> Stream<T>.toSortedSet() : SortedSet<T> {
    return toCollection(TreeSet<T>())
}

