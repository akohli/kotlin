package kotlin

//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

import java.util.*

/**
 * Returns the largest element or null if there are no elements
 */
public fun Iterable<Int>.sum() : Int {
    val iterator = iterator()
    var sum : Int = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Array<Int>.sum() : Int {
    val iterator = iterator()
    var sum : Int = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun IntArray.sum() : Int {
    val iterator = iterator()
    var sum : Int = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Iterable<Long>.sum() : Long {
    val iterator = iterator()
    var sum : Long = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Array<Long>.sum() : Long {
    val iterator = iterator()
    var sum : Long = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun LongArray.sum() : Long {
    val iterator = iterator()
    var sum : Long = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Iterable<Byte>.sum() : Byte {
    val iterator = iterator()
    var sum : Byte = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Array<Byte>.sum() : Byte {
    val iterator = iterator()
    var sum : Byte = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun ByteArray.sum() : Byte {
    val iterator = iterator()
    var sum : Byte = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Iterable<Short>.sum() : Short {
    val iterator = iterator()
    var sum : Short = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Array<Short>.sum() : Short {
    val iterator = iterator()
    var sum : Short = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun ShortArray.sum() : Short {
    val iterator = iterator()
    var sum : Short = 0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Iterable<Double>.sum() : Double {
    val iterator = iterator()
    var sum : Double = 0.0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Array<Double>.sum() : Double {
    val iterator = iterator()
    var sum : Double = 0.0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun DoubleArray.sum() : Double {
    val iterator = iterator()
    var sum : Double = 0.0
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Iterable<Float>.sum() : Float {
    val iterator = iterator()
    var sum : Float = 0.0f
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun Array<Float>.sum() : Float {
    val iterator = iterator()
    var sum : Float = 0.0f
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

/**
 * Returns the largest element or null if there are no elements
 */
public fun FloatArray.sum() : Float {
    val iterator = iterator()
    var sum : Float = 0.0f
    while (iterator.hasNext()) {
        sum += iterator.next()
    }
    return sum
    
}

